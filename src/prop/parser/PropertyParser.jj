/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(Prop)package prop.parser;

public class Prop{  public static void main(String args []) throws ParseException  {    EG1 parser = new EG1(System.in);    while (true)    {      System.out.println("Reading from standard input...");      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");      try      {        switch (EG1.one_line())        {          case 0 :           System.out.println("OK.");          break;          case 1 :           System.out.println("Goodbye.");          break;          default :           break;        }      }      catch (Exception e)      {        System.out.println("NOK.");        System.out.println(e.getMessage());        EG1.ReInit(System.in);      }      catch (Error e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());        break;      }    }  }}PARSER_END(EG1)TOKEN :{  < SPACE : [" ", "\r", "\t", "\n"]+ >
}
TOKEN :
{
  < NOT : "!" >
| < AND : "/\" | "&&" >
| < OR : "\/" | "||" >
| < TRUE : "true" >
| < FALSE : "false" >
| < PROB : "P" >
}TOKEN : {  < NEXT : "X" >| < EVENTUALLY : "<>" >| < ALWAYS : "[]" >| < UNTIL : "U" >}TOKEN :{  < COMP : ["<=", "<", ">=", ">"] >
| <LBRACKET : "(" >
| <RBRACKET : ")" >
| < LT : "<" >
| <DIGIT : ["0" - "9"] >
| <INTEGER : <DIGIT>+ >
| <FLOAT : <DIGIT>+.<DIGIT>+>}

int one_line() :{}{  sum() ";"  {    return 0;  }| ";"  {    return 1;  }}void sum() :{}{  term()  (    (      < PLUS >    | < MINUS >    )    term()  )*}void term() :{}{  unary()  (    (      < MULTIPLY >    | < DIVIDE >    )    unary()  )*}void unary() :{}{  < MINUS > element()| element()}void element() :{}{  < CONSTANT >| "(" sum() ")"}
